Problem Statement
There is a non-negative integer X initially equal to S. One can perform the following operations, in any order, any number of times:

Add 1 to X. This has a cost of A.
Choose i between 1 and N, and replace X with X ⊕Y_i. This has a cost of C_i. Here, ⊕denotes bitwise XOR.

Find the smallest total cost to make X equal to a given non-negative integer T, or report that this is impossible.


        What is bitwise XOR?
    

        The bitwise XOR of non-negative integers A and B, A ⊕B, is defined as follows:
        
When A ⊕B is written in base two, the digit in the 2^k's place (k ≥0) is 1 if exactly one of the digits in that place of A and B is 1, and 0 otherwise.

        For example, we have 3 ⊕5 = 6 (in base two: 011 ⊕101 = 110).  
        Generally, the bitwise XOR of k non-negative integers p_1, p_2, p_3, …, p_k is defined as (…((p_1 ⊕p_2) ⊕p_3) ⊕…⊕p_k). We can prove that this value does not depend on the order of p_1, p_2, p_3, …, p_k.
    


Constraints

1 ≤N ≤8
0 ≤S, T < 2^40
0 ≤A ≤10^5
0 ≤Y_i < 2^40 (1 ≤i ≤N)
0 ≤C_i ≤10^16 (1 ≤i ≤N)
All values in the input are integers. 


Input
Input
 is given from Standard Input
 in the following format:
N S T A
Y_1 C_1
⋮Y_N C_N


Output
If the task is impossible, print -1.
Otherwise, print the smallest total cost. 

Sample Input

 11 15 0 1
8 2


Sample Output

 15

You can make X equal to T in the following manner:

Choose i=1 and replace X with X ⊕8 to get X=7. This has a cost of 2.
Add 1 to X to get X=8. This has a cost of 1.
Choose i=1 and replace X with X ⊕8 to get X=0. This has a cost of 2.


Sample Input

 23 21 10 100
30 1
12 1
13 1


Sample Output

 23


Sample Input

 31 2 0 1
1 1


Sample Output

 3-1


Sample Input

 48 352217 670575 84912
239445 2866
537211 16
21812 6904
50574 8842
380870 5047
475646 8924
188204 2273
429397 4854


Sample Output

 4563645
